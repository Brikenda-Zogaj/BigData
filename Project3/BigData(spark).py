# -*- coding: utf-8 -*-
"""Big Data (Spark).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RbMpqXsTLUU6CaHEtr5l6-TV8liN4lT7
"""

!pip install pyspark

from pyspark.sql import SparkSession

spark = SparkSession.builder.appName("BigDataProject3").getOrCreate()

df_province = spark.read.csv('/content/mondial/province.csv', header=True, inferSchema=True)
df_city = spark.read.csv('/content/mondial/city.csv', header=True, inferSchema=True)
df_located = spark.read.csv('/content/mondial/located.csv', header=True, inferSchema=True)
df_river = spark.read.csv('/content/mondial/river.csv', header=True, inferSchema=True)
df_sea = spark.read.csv('/content/mondial/sea.csv', header=True, inferSchema=True)
df_islandin = spark.read.csv('/content/mondial/islandin.csv', header=True, inferSchema=True)
df_geo_sea = spark.read.csv('/content/mondial/geo_sea.csv', header=True, inferSchema=True)
df_ismember = spark.read.csv('/content/mondial/ismember.csv', header=True, inferSchema=True)
df_organization = spark.read.csv('/content/mondial/organization.csv', header=True, inferSchema=True)

df_province.createOrReplaceTempView('province')
df_city.createOrReplaceTempView('city')
df_located.createOrReplaceTempView('located')
df_river.createOrReplaceTempView('river')
df_sea.createOrReplaceTempView('sea')
df_islandin.createOrReplaceTempView('islandin')
df_geo_sea.createOrReplaceTempView('geo_sea')
df_ismember.createOrReplaceTempView('ismember')
df_organization.createOrReplaceTempView('organization')

#Listoni emrat e kryeqyteteve te provincave te Kanadase perfshi numrin e popullesise si dhe qe ne to kalon se paku nje lum
query1 = """
SELECT
    ci.name AS capital_city,
    ci.population AS population,
    COUNT(DISTINCT r.name) AS number_of_rivers
FROM
    province prov
JOIN
    city ci ON prov.capital = ci.name
JOIN
    located lr ON ci.name = lr.city
JOIN
    river r ON lr.river = r.name
WHERE
    prov.country = 'CDN'
GROUP BY
    ci.name, ci.population
HAVING
    COUNT(DISTINCT r.name) >= 1
ORDER BY
    ci.name
"""

result1 = spark.sql(query1)
result1.show()

#Te listohen te gjitha detet ne te cilat nuk ka asnje ishull por shtetet te cilat kufizohet ai det jane antare ne NATO ose BE

query2 = """
SELECT s.name AS sea_name
FROM sea s
LEFT JOIN islandin i ON s.name = i.sea
JOIN geo_sea gs ON s.name = gs.sea
JOIN ismember m ON gs.country = m.country
JOIN organization o ON m.organization = o.abbreviation
WHERE i.island IS NULL
  AND o.name IN ('NATO', 'European Union')
GROUP BY s.name
HAVING COUNT(DISTINCT gs.country) = COUNT(DISTINCT CASE WHEN o.name IN ('NATO', 'European Union') THEN gs.country END)
"""
result2 = spark.sql(query2)
result2.show()

df_nature = spark.read.csv('/content/newDataset/nature.csv', header=True, inferSchema=True)
df_nature.createOrReplaceTempView('nature')

df_nature.printSchema()
df_nature.show(5)

#Analiza e temperaturës, lagështisë dhe cilësisë së ajrit sipas lokacionit
spark.sql("""
SELECT
    location,
    AVG(temperature) AS avg_temp,
    MAX(temperature) AS max_temp,
    AVG(humidity) AS avg_humidity,
    AVG(air_quality_index) AS avg_air_quality
FROM nature
GROUP BY location
ORDER BY avg_temp DESC
""").show()

#Zonat më të ndotura për nga CO2 dhe zhurma
spark.sql("""
SELECT
    location,
    AVG(noise_db) AS avg_noise_db,
    AVG(co2_ppm) AS avg_co2
FROM nature
GROUP BY location
ORDER BY avg_co2 DESC, avg_noise_db DESC
""").show()

#Shpërndarja e llojeve të faunës së egër të hasur në terren
spark.sql("""
SELECT
    wildlife_spotted,
    COUNT(*) AS sightings
FROM nature
WHERE wildlife_spotted IS NOT NULL
GROUP BY wildlife_spotted
ORDER BY sightings DESC
""").show()

